// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: queries.sql

package queries

import (
	"context"
	"database/sql"
)

const getApiKey = `-- name: GetApiKey :one
SELECT id,
  sec,
  KEY,
  sub,
  alg,
  exp,
  name
FROM apikey
WHERE id = $1
`

func (q *Queries) GetApiKey(ctx context.Context, db DBTX, id int64) (Apikey, error) {
	row := db.QueryRowContext(ctx, getApiKey, id)
	var i Apikey
	err := row.Scan(
		&i.ID,
		&i.Sec,
		&i.Key,
		&i.Sub,
		&i.Alg,
		&i.Exp,
		&i.Name,
	)
	return i, err
}

const getApiKeyForVerify = `-- name: GetApiKeyForVerify :one
SELECT id,
  sec,
  KEY,
  sub,
  alg
FROM apikey
WHERE id = $1
  AND (
    exp IS NULL
    OR exp > NOW()
  )
`

type GetApiKeyForVerifyRow struct {
	ID  int64          `json:"id"`
	Sec []byte         `json:"sec"`
	Key []byte         `json:"key"`
	Sub sql.NullString `json:"sub"`
	Alg NullAlgType    `json:"alg"`
}

func (q *Queries) GetApiKeyForVerify(ctx context.Context, db DBTX, id int64) (GetApiKeyForVerifyRow, error) {
	row := db.QueryRowContext(ctx, getApiKeyForVerify, id)
	var i GetApiKeyForVerifyRow
	err := row.Scan(
		&i.ID,
		&i.Sec,
		&i.Key,
		&i.Sub,
		&i.Alg,
	)
	return i, err
}

const insertApiKey = `-- name: InsertApiKey :one
INSERT INTO apikey (sec, KEY, sub, alg, exp, name)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id
`

type InsertApiKeyParams struct {
	Sec  []byte         `json:"sec"`
	Key  []byte         `json:"key"`
	Sub  sql.NullString `json:"sub"`
	Alg  NullAlgType    `json:"alg"`
	Exp  sql.NullTime   `json:"exp"`
	Name sql.NullString `json:"name"`
}

func (q *Queries) InsertApiKey(ctx context.Context, db DBTX, arg InsertApiKeyParams) (int64, error) {
	row := db.QueryRowContext(ctx, insertApiKey,
		arg.Sec,
		arg.Key,
		arg.Sub,
		arg.Alg,
		arg.Exp,
		arg.Name,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const searchApiKeys = `-- name: SearchApiKeys :many
SELECT id,
  sec,
  KEY,
  sub,
  alg,
  exp,
  name
FROM apikey
WHERE sub = $1
`

func (q *Queries) SearchApiKeys(ctx context.Context, db DBTX, sub sql.NullString) ([]Apikey, error) {
	rows, err := db.QueryContext(ctx, searchApiKeys, sub)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Apikey
	for rows.Next() {
		var i Apikey
		if err := rows.Scan(
			&i.ID,
			&i.Sec,
			&i.Key,
			&i.Sub,
			&i.Alg,
			&i.Exp,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
